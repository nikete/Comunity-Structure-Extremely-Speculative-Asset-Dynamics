#!/usr/bin/python

import argparse
import os
import csv
import sys
from datetime import datetime, date, timedelta

parser = argparse.ArgumentParser(
    description="This scripts takes two input files and joins them by network_date. The "
                "first file contains the network metrics by date where the  first field "
                "is network_date. The second file contains per coin metrics where the "
                "first field is the coin name and the second field is network_date.")
parser.add_argument("by_date_network_input_file",
                    help="Location of file containing by date network metrics.")
parser.add_argument("by_coin_network_input_file",
                    help="Location of file containing by coin network metrics.")
parser.add_argument("output_file",
                    help="Location of output file with joined results.")

args = parser.parse_args()

def separate_by_date_fields(row):
  network_date = row[0]
  other_fields = list()
  for i in range(1, len(row)):
    other_fields.append(row[i])
  return (network_date, other_fields)


def separate_by_coin_fields(row):
  coin = row[0]
  network_date = row[1]
  other_fields = list()
  for i in range(2, len(row)):
    other_fields.append(row[i])
  return (coin, network_date, other_fields)


def main():
  # map from date to metrics
  by_date_metrics = dict()
  # map from coin to metrics
  by_coin_metrics = dict()

  # read by date info
  by_date_file = open(args.by_date_network_input_file, 'r')
  by_date_reader = csv.reader(by_date_file, delimiter = ',')
  by_date_header = by_date_reader.next()
  (by_date_header_network_date,
   by_date_header_other_fields) = separate_by_date_fields(by_date_header)
  
  for row in by_date_reader:
    (network_date, other_fields) = separate_by_date_fields(row)
    by_date_metrics[network_date] = other_fields

  by_date_file.close()
  
  # read by coin info
  by_coin_file = open(args.by_coin_network_input_file, 'r')
  by_coin_reader = csv.reader(by_coin_file, delimiter = ',')
  by_coin_header = by_coin_reader.next()
  (by_coin_header_coin,
   by_coin_header_network_date,
   by_coin_header_other_fields) = separate_by_coin_fields(by_coin_header)
  
  for row in by_coin_reader:
    (coin, network_date, other_fields) = separate_by_coin_fields(row)
    by_coin_metrics[coin] = (network_date, other_fields)

  by_coin_file.close()

  # now join by network_date
  csvwriter = csv.writer(open(args.output_file, 'w'), delimiter=',')
  output_header = [by_coin_header_coin, by_coin_header_network_date]
  output_header.extend(by_date_header_other_fields)
  output_header.extend(by_coin_header_other_fields)
  csvwriter.writerow(output_header)
  num_fields = len(output_header)

  for coin, info in by_coin_metrics.iteritems():
    network_date = info[0]
    other_coin_fields = info[1]
    while network_date not in by_date_metrics:
      orig_network_date = network_date
      prev_date = datetime.strptime(network_date, "%Y-%m-%d").date() - timedelta(days=1)
      network_date = prev_date.strftime("%Y-%m-%d")
      print('Warning: Date %s does not exist in network dates. Using fields '
            'from previous day %s for coin %s' % (orig_network_date, network_date, coin))

    other_date_fields = by_date_metrics[network_date]
    
    output_row = [coin, network_date]
    output_row.extend(other_date_fields)
    output_row.extend(other_coin_fields)
    output_row.extend(['']*(num_fields - len(output_row)))

    csvwriter.writerow(output_row)

if __name__ == '__main__':
  main()
